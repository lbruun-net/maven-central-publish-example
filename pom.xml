<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>net.lbruun.tests</groupId>
  <artifactId>maven-central-publish-example</artifactId>
  <version>${revision}${sha1}${changelist}</version> <!-- never change this -->

  <properties>
    <maven.compiler.source>17</maven.compiler.source>
    <maven.compiler.target>17</maven.compiler.target>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>


    <!-- Some sensible defaults for local development.
         These are only used when executing Maven locally. -->
    <revision/>
    <changelist>LATEST-SNAPSHOT</changelist>
    <sha1/>
    <ci.project.url>https://UNKNOWN.ORG</ci.project.url>
  </properties>


  <name>Maven Central Publish Example</name>
  <description>Example of how to publish a Java library to Maven Central using GitHub and Maven.</description>
  <url>${ci.project.url}</url>

  <licenses>
    <license>
      <name>The Apache License, Version 2.0</name>
      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
    </license>
  </licenses>

  <developers>
    <developer>
      <name>Lars Bruun-Hansen</name>
      <organization>lbruun.net</organization>
      <organizationUrl>https://github.com/lbruun</organizationUrl>
    </developer>
  </developers>


  <!-- This section is not used in the deploy/release process, but is required to exist for
       publishing to Maven Central.                                                -->
  <scm>
    <connection>scm:git:${ci.project.url}.git</connection>
    <developerConnection>scm:git:${ci.project.url}.git</developerConnection>
    <url>${ci.project.url}</url>
  </scm>


  <build>
    <pluginManagement>
      <plugins>

        <!-- This POM uses the classic maven-deploy-plugin. We could alternatively use Sonatype's Staging Plugin
             which can by-pass the UI action. When we use the classic maven-deploy-plugin it will be required (after
             deployment has executed) to go into the Sonatype UI and release the artifact bundle.
             Once you become confident with the workflow, you can switch to the Sonatype Staging plugin instead. -->

        <!-- Maven prior to v3.9 uses version 2.x of the deploy plugin and after this use v3.x of the deploy plugin.
             We use the 'altReleaseDeploymentRepository' and 'altSnapshotDeploymentRepository' properties
             so best to use v3.x of the plugin -->
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>3.1.2</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <!-- The 'flatten-maven-plugin' is required because we use Maven CI Friendly feature.
           See https://maven.apache.org/maven-ci-friendly.html for more information.
           In Maven 4 we can finally get rid of this plugin.                                 -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>flatten-maven-plugin</artifactId>
        <version>1.2.5</version>
        <configuration>
          <flattenMode>ossrh</flattenMode>
        </configuration>
        <executions>
          <!-- enable flattening -->
          <execution>
            <id>flatten</id>
            <phase>process-resources</phase>
            <goals>
              <goal>flatten</goal>
            </goals>
          </execution>
          <!-- ensure proper cleanup -->
          <execution>
            <id>flatten.clean</id>
            <phase>clean</phase>
            <goals>
              <goal>clean</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <!-- This profile should be activated when building in the CI system -->
      <id>ci</id>
      <build>
        <plugins>
          <!--  Javadoc here because we want to know early if there are errors in Javadoc generation.
                In the standard Sonatype guidelines it is inside the 'release-to-central' profile
                which means we will not discover Javadoc errors until we decide to release.
                Instead, we pay the price of Javadoc generation on every push: an acceptable tradeoff.
          -->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-javadoc-plugin</artifactId>
            <version>3.6.2</version>
            <executions>
              <execution>
                <id>attach-javadocs</id>
                <goals>
                  <goal>jar</goal>
                </goals>
              </execution>
            </executions>
          </plugin>


          <!-- Get info from Git. The only reason for this is so that we can put
               such information into the JAR's manifest. This is purely nice-to-have
               but is in particular handy for SNAPSHOT releases. -->
          <plugin>
            <groupId>io.github.git-commit-id</groupId>
            <artifactId>git-commit-id-maven-plugin</artifactId>
            <version>9.0.1</version>
            <executions>
              <execution>
                <id>get-the-git-infos</id>
                <goals>
                  <goal>revision</goal>
                </goals>
                <phase>initialize</phase>
              </execution>
            </executions>
            <configuration>
              <generateGitPropertiesFile>false</generateGitPropertiesFile>
            </configuration>
          </plugin>

          <!-- Add info entries to MANIFEST.MF file -->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-jar-plugin</artifactId>
            <configuration>
              <archive>
                <manifestEntries>
                  <git-branch>${git.branch}</git-branch>
                  <git-commit-id>${git.commit.id.abbrev}</git-commit-id>
                  <project-url>${ci.project.url}</project-url>
                </manifestEntries>
              </archive>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>


    <!-- This profile should be activated when creating releases into Maven Central
         (regardless if regular release or snapshot release). -->
    <profile>
      <id>release-to-central</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-source-plugin</artifactId>
            <version>3.2.1</version>
            <executions>
              <execution>
                <id>attach-sources</id>
                <goals>
                  <goal>jar-no-fork</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-gpg-plugin</artifactId>
            <version>1.6</version>
            <executions>
              <execution>
                <id>sign-artifacts</id>
                <phase>verify</phase>
                <goals>
                  <goal>sign</goal>
                </goals>
                <configuration>
                  <gpgArguments>
                    <arg>--pinentry-mode</arg>
                    <arg>loopback</arg>
                  </gpgArguments>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

</project>